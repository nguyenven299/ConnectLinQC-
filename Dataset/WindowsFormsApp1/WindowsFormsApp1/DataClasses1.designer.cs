#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowsFormsApp1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DatabaseTest")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertuser(user instance);
    partial void Updateuser(user instance);
    partial void Deleteuser(user instance);
    partial void Inserttask(task instance);
    partial void Updatetask(task instance);
    partial void Deletetask(task instance);
    partial void InsertTodoTodo(TodoTodo instance);
    partial void UpdateTodoTodo(TodoTodo instance);
    partial void DeleteTodoTodo(TodoTodo instance);
    partial void Inserttodo(todo instance);
    partial void Updatetodo(todo instance);
    partial void Deletetodo(todo instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::WindowsFormsApp1.Properties.Settings.Default.DatabaseTestConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<user> users
		{
			get
			{
				return this.GetTable<user>();
			}
		}
		
		public System.Data.Linq.Table<task> tasks
		{
			get
			{
				return this.GetTable<task>();
			}
		}
		
		public System.Data.Linq.Table<TodoTodo> TodoTodos
		{
			get
			{
				return this.GetTable<TodoTodo>();
			}
		}
		
		public System.Data.Linq.Table<todo> todos
		{
			get
			{
				return this.GetTable<todo>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.users")]
	public partial class user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idUser;
		
		private string _nameUser;
		
		private string _emailUser;
		
		private EntitySet<todo> _todos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidUserChanging(int value);
    partial void OnidUserChanged();
    partial void OnnameUserChanging(string value);
    partial void OnnameUserChanged();
    partial void OnemailUserChanging(string value);
    partial void OnemailUserChanged();
    #endregion
		
		public user()
		{
			this._todos = new EntitySet<todo>(new Action<todo>(this.attach_todos), new Action<todo>(this.detach_todos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idUser", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idUser
		{
			get
			{
				return this._idUser;
			}
			set
			{
				if ((this._idUser != value))
				{
					this.OnidUserChanging(value);
					this.SendPropertyChanging();
					this._idUser = value;
					this.SendPropertyChanged("idUser");
					this.OnidUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nameUser", DbType="NVarChar(25)")]
		public string nameUser
		{
			get
			{
				return this._nameUser;
			}
			set
			{
				if ((this._nameUser != value))
				{
					this.OnnameUserChanging(value);
					this.SendPropertyChanging();
					this._nameUser = value;
					this.SendPropertyChanged("nameUser");
					this.OnnameUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_emailUser", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string emailUser
		{
			get
			{
				return this._emailUser;
			}
			set
			{
				if ((this._emailUser != value))
				{
					this.OnemailUserChanging(value);
					this.SendPropertyChanging();
					this._emailUser = value;
					this.SendPropertyChanged("emailUser");
					this.OnemailUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_todo", Storage="_todos", ThisKey="idUser", OtherKey="idUser")]
		public EntitySet<todo> todos
		{
			get
			{
				return this._todos;
			}
			set
			{
				this._todos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_todos(todo entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_todos(todo entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tasks")]
	public partial class task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idTask;
		
		private string _nameTask;
		
		private System.Nullable<bool> _isFinishedTask;
		
		private System.Nullable<System.DateTime> _timeReminder;
		
		private System.Nullable<int> _idTodo;
		
		private EntityRef<todo> _todo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidTaskChanging(int value);
    partial void OnidTaskChanged();
    partial void OnnameTaskChanging(string value);
    partial void OnnameTaskChanged();
    partial void OnisFinishedTaskChanging(System.Nullable<bool> value);
    partial void OnisFinishedTaskChanged();
    partial void OntimeReminderChanging(System.Nullable<System.DateTime> value);
    partial void OntimeReminderChanged();
    partial void OnidTodoChanging(System.Nullable<int> value);
    partial void OnidTodoChanged();
    #endregion
		
		public task()
		{
			this._todo = default(EntityRef<todo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTask", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idTask
		{
			get
			{
				return this._idTask;
			}
			set
			{
				if ((this._idTask != value))
				{
					this.OnidTaskChanging(value);
					this.SendPropertyChanging();
					this._idTask = value;
					this.SendPropertyChanged("idTask");
					this.OnidTaskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nameTask", DbType="NVarChar(25)")]
		public string nameTask
		{
			get
			{
				return this._nameTask;
			}
			set
			{
				if ((this._nameTask != value))
				{
					this.OnnameTaskChanging(value);
					this.SendPropertyChanging();
					this._nameTask = value;
					this.SendPropertyChanged("nameTask");
					this.OnnameTaskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isFinishedTask", DbType="Bit")]
		public System.Nullable<bool> isFinishedTask
		{
			get
			{
				return this._isFinishedTask;
			}
			set
			{
				if ((this._isFinishedTask != value))
				{
					this.OnisFinishedTaskChanging(value);
					this.SendPropertyChanging();
					this._isFinishedTask = value;
					this.SendPropertyChanged("isFinishedTask");
					this.OnisFinishedTaskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeReminder", DbType="DateTime")]
		public System.Nullable<System.DateTime> timeReminder
		{
			get
			{
				return this._timeReminder;
			}
			set
			{
				if ((this._timeReminder != value))
				{
					this.OntimeReminderChanging(value);
					this.SendPropertyChanging();
					this._timeReminder = value;
					this.SendPropertyChanged("timeReminder");
					this.OntimeReminderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTodo", DbType="Int")]
		public System.Nullable<int> idTodo
		{
			get
			{
				return this._idTodo;
			}
			set
			{
				if ((this._idTodo != value))
				{
					if (this._todo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidTodoChanging(value);
					this.SendPropertyChanging();
					this._idTodo = value;
					this.SendPropertyChanged("idTodo");
					this.OnidTodoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="todo_task", Storage="_todo", ThisKey="idTodo", OtherKey="idTodo", IsForeignKey=true)]
		public todo todo
		{
			get
			{
				return this._todo.Entity;
			}
			set
			{
				todo previousValue = this._todo.Entity;
				if (((previousValue != value) 
							|| (this._todo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._todo.Entity = null;
						previousValue.tasks.Remove(this);
					}
					this._todo.Entity = value;
					if ((value != null))
					{
						value.tasks.Add(this);
						this._idTodo = value.idTodo;
					}
					else
					{
						this._idTodo = default(Nullable<int>);
					}
					this.SendPropertyChanged("todo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TodoTodos")]
	public partial class TodoTodo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdToDo;
		
		private string _NameTodo;
		
		private System.Nullable<bool> _Completed;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdToDoChanging(int value);
    partial void OnIdToDoChanged();
    partial void OnNameTodoChanging(string value);
    partial void OnNameTodoChanged();
    partial void OnCompletedChanging(System.Nullable<bool> value);
    partial void OnCompletedChanged();
    #endregion
		
		public TodoTodo()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdToDo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdToDo
		{
			get
			{
				return this._IdToDo;
			}
			set
			{
				if ((this._IdToDo != value))
				{
					this.OnIdToDoChanging(value);
					this.SendPropertyChanging();
					this._IdToDo = value;
					this.SendPropertyChanged("IdToDo");
					this.OnIdToDoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameTodo", DbType="NVarChar(225)")]
		public string NameTodo
		{
			get
			{
				return this._NameTodo;
			}
			set
			{
				if ((this._NameTodo != value))
				{
					this.OnNameTodoChanging(value);
					this.SendPropertyChanging();
					this._NameTodo = value;
					this.SendPropertyChanged("NameTodo");
					this.OnNameTodoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Completed", DbType="Bit")]
		public System.Nullable<bool> Completed
		{
			get
			{
				return this._Completed;
			}
			set
			{
				if ((this._Completed != value))
				{
					this.OnCompletedChanging(value);
					this.SendPropertyChanging();
					this._Completed = value;
					this.SendPropertyChanged("Completed");
					this.OnCompletedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.todos")]
	public partial class todo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idTodo;
		
		private string _nameTodo;
		
		private string _descriptionTodo;
		
		private System.Nullable<int> _priorityTodo;
		
		private System.Nullable<System.DateTime> _dueDateTodo;
		
		private System.Nullable<int> _idUser;
		
		private EntitySet<task> _tasks;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidTodoChanging(int value);
    partial void OnidTodoChanged();
    partial void OnnameTodoChanging(string value);
    partial void OnnameTodoChanged();
    partial void OndescriptionTodoChanging(string value);
    partial void OndescriptionTodoChanged();
    partial void OnpriorityTodoChanging(System.Nullable<int> value);
    partial void OnpriorityTodoChanged();
    partial void OndueDateTodoChanging(System.Nullable<System.DateTime> value);
    partial void OndueDateTodoChanged();
    partial void OnidUserChanging(System.Nullable<int> value);
    partial void OnidUserChanged();
    #endregion
		
		public todo()
		{
			this._tasks = new EntitySet<task>(new Action<task>(this.attach_tasks), new Action<task>(this.detach_tasks));
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTodo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idTodo
		{
			get
			{
				return this._idTodo;
			}
			set
			{
				if ((this._idTodo != value))
				{
					this.OnidTodoChanging(value);
					this.SendPropertyChanging();
					this._idTodo = value;
					this.SendPropertyChanged("idTodo");
					this.OnidTodoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nameTodo", DbType="NVarChar(50)")]
		public string nameTodo
		{
			get
			{
				return this._nameTodo;
			}
			set
			{
				if ((this._nameTodo != value))
				{
					this.OnnameTodoChanging(value);
					this.SendPropertyChanging();
					this._nameTodo = value;
					this.SendPropertyChanged("nameTodo");
					this.OnnameTodoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_descriptionTodo", DbType="NVarChar(500)")]
		public string descriptionTodo
		{
			get
			{
				return this._descriptionTodo;
			}
			set
			{
				if ((this._descriptionTodo != value))
				{
					this.OndescriptionTodoChanging(value);
					this.SendPropertyChanging();
					this._descriptionTodo = value;
					this.SendPropertyChanged("descriptionTodo");
					this.OndescriptionTodoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_priorityTodo", DbType="Int")]
		public System.Nullable<int> priorityTodo
		{
			get
			{
				return this._priorityTodo;
			}
			set
			{
				if ((this._priorityTodo != value))
				{
					this.OnpriorityTodoChanging(value);
					this.SendPropertyChanging();
					this._priorityTodo = value;
					this.SendPropertyChanged("priorityTodo");
					this.OnpriorityTodoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dueDateTodo", DbType="DateTime")]
		public System.Nullable<System.DateTime> dueDateTodo
		{
			get
			{
				return this._dueDateTodo;
			}
			set
			{
				if ((this._dueDateTodo != value))
				{
					this.OndueDateTodoChanging(value);
					this.SendPropertyChanging();
					this._dueDateTodo = value;
					this.SendPropertyChanged("dueDateTodo");
					this.OndueDateTodoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idUser", DbType="Int")]
		public System.Nullable<int> idUser
		{
			get
			{
				return this._idUser;
			}
			set
			{
				if ((this._idUser != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidUserChanging(value);
					this.SendPropertyChanging();
					this._idUser = value;
					this.SendPropertyChanged("idUser");
					this.OnidUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="todo_task", Storage="_tasks", ThisKey="idTodo", OtherKey="idTodo")]
		public EntitySet<task> tasks
		{
			get
			{
				return this._tasks;
			}
			set
			{
				this._tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_todo", Storage="_user", ThisKey="idUser", OtherKey="idUser", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.todos.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.todos.Add(this);
						this._idUser = value.idUser;
					}
					else
					{
						this._idUser = default(Nullable<int>);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tasks(task entity)
		{
			this.SendPropertyChanging();
			entity.todo = this;
		}
		
		private void detach_tasks(task entity)
		{
			this.SendPropertyChanging();
			entity.todo = null;
		}
	}
}
#pragma warning restore 1591
